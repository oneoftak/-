{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNPrFmGUqyVcyvR/o8Zyxh2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/oneoftak/-/blob/main/202401351_%EC%95%88%EC%A0%84%EA%B3%B5%ED%95%99%EA%B3%BC_%ED%83%81%ED%95%9C%EC%98%81_%EA%B8%B0%EB%A7%90_%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZEm6q1UQbMXy",
        "outputId": "1b3a304f-70e5-4078-d3d3-30a8fcb2af23"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "fonts-nanum is already the newest version (20200506-1).\n",
            "0 upgraded, 0 newly installed, 0 to remove and 49 not upgraded.\n",
            "/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n",
            "/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n",
            "/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/nanum: caching, new cache contents: 12 fonts, 0 dirs\n",
            "/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n",
            "/root/.local/share/fonts: skipping, no such directory\n",
            "/root/.fonts: skipping, no such directory\n",
            "/usr/share/fonts/truetype: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n",
            "/var/cache/fontconfig: cleaning cache directory\n",
            "/root/.cache/fontconfig: not cleaning non-existent cache directory\n",
            "/root/.fontconfig: not cleaning non-existent cache directory\n",
            "fc-cache: succeeded\n"
          ]
        }
      ],
      "source": [
        "!sudo apt-get install -y fonts-nanum\n",
        "!sudo fc-cache -fv\n",
        "!rm ~/.cache/matplotlib -rf\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy  as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "L5n58giVgY6l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.rc('font', family='NanumBarunGothic') # 폰트 설정\n",
        "plt.rc('axes', unicode_minus=False) # 마이너스 폰트 설정\n",
        "%config InlineBackend.figure_format='retina' # 그래프 글씨 뚜렷\n",
        "\n",
        "import missingno as msno # 경고 메세지 무시\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "warnings.simplefilter(action='ignore',category=FutureWarning)"
      ],
      "metadata": {
        "id": "RbnErLVOgbz7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mon = ['jan','feb','3월','4월','5월']\n",
        "sales = [1,5,7,-3,7]\n",
        "\n",
        "plt.title('월별 판매 실적')\n",
        "plt.plot(mon, sales)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Tidcows4gfan",
        "outputId": "9c5260ce-ccd8-41e7-c2f2-7395c9f9a1a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "image/png": {
              "width": 539,
              "height": 434
            }
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8xSR9GDRgiLr",
        "outputId": "d5212598-cd29-43a7-8f13-fc021c9ba66f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.read_csv('/content/drive/MyDrive/'+ '체력측정.csv', encoding = 'cp949')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "lsiHCFUzgiMo",
        "outputId": "b4f39b89-a49d-4fe0-fe9e-32bfa426224b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Unnamed: 0  측정회차   센터명 측정장소  연령         측정일 성별      키  윗몸일으키기  멀리뛰기\n",
              "0             0     1  서울지점   출장  14  2022-05-02  F  167.0      76   131\n",
              "1             1     4  서울지점   일반  21  2022-05-02  M  177.4      67   125\n",
              "2             2     2  서울지점   출장  14  2022-05-02  M  180.5      62   117\n",
              "3             3     2  서울지점   출장  17  2022-05-02  F  154.6      84   129\n",
              "4             4     1  서울지점   출장  13  2022-05-02  M  142.7      89   129\n",
              "..          ...   ...   ...  ...  ..         ... ..    ...     ...   ...\n",
              "494         494     1  미추홀점   출장  18  2022-05-17  F  162.9      61   118\n",
              "495         495     1  미추홀점   일반  38  2022-05-17  M  174.6      84   123\n",
              "496         496     1  미추홀점   출장  18  2022-05-17  M  172.9      76   118\n",
              "497         497     1  미추홀점   출장  18  2022-05-17  M  173.0      88   125\n",
              "498         498     1  미추홀점   출장  19  2022-05-17  F  165.5      92   137\n",
              "\n",
              "[499 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae73f92f-d3d2-4cef-b123-cc1010c0d631\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>측정회차</th>\n",
              "      <th>센터명</th>\n",
              "      <th>측정장소</th>\n",
              "      <th>연령</th>\n",
              "      <th>측정일</th>\n",
              "      <th>성별</th>\n",
              "      <th>키</th>\n",
              "      <th>윗몸일으키기</th>\n",
              "      <th>멀리뛰기</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>서울지점</td>\n",
              "      <td>출장</td>\n",
              "      <td>14</td>\n",
              "      <td>2022-05-02</td>\n",
              "      <td>F</td>\n",
              "      <td>167.0</td>\n",
              "      <td>76</td>\n",
              "      <td>131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>서울지점</td>\n",
              "      <td>일반</td>\n",
              "      <td>21</td>\n",
              "      <td>2022-05-02</td>\n",
              "      <td>M</td>\n",
              "      <td>177.4</td>\n",
              "      <td>67</td>\n",
              "      <td>125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>서울지점</td>\n",
              "      <td>출장</td>\n",
              "      <td>14</td>\n",
              "      <td>2022-05-02</td>\n",
              "      <td>M</td>\n",
              "      <td>180.5</td>\n",
              "      <td>62</td>\n",
              "      <td>117</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>서울지점</td>\n",
              "      <td>출장</td>\n",
              "      <td>17</td>\n",
              "      <td>2022-05-02</td>\n",
              "      <td>F</td>\n",
              "      <td>154.6</td>\n",
              "      <td>84</td>\n",
              "      <td>129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>서울지점</td>\n",
              "      <td>출장</td>\n",
              "      <td>13</td>\n",
              "      <td>2022-05-02</td>\n",
              "      <td>M</td>\n",
              "      <td>142.7</td>\n",
              "      <td>89</td>\n",
              "      <td>129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>494</th>\n",
              "      <td>494</td>\n",
              "      <td>1</td>\n",
              "      <td>미추홀점</td>\n",
              "      <td>출장</td>\n",
              "      <td>18</td>\n",
              "      <td>2022-05-17</td>\n",
              "      <td>F</td>\n",
              "      <td>162.9</td>\n",
              "      <td>61</td>\n",
              "      <td>118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>495</th>\n",
              "      <td>495</td>\n",
              "      <td>1</td>\n",
              "      <td>미추홀점</td>\n",
              "      <td>일반</td>\n",
              "      <td>38</td>\n",
              "      <td>2022-05-17</td>\n",
              "      <td>M</td>\n",
              "      <td>174.6</td>\n",
              "      <td>84</td>\n",
              "      <td>123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>496</th>\n",
              "      <td>496</td>\n",
              "      <td>1</td>\n",
              "      <td>미추홀점</td>\n",
              "      <td>출장</td>\n",
              "      <td>18</td>\n",
              "      <td>2022-05-17</td>\n",
              "      <td>M</td>\n",
              "      <td>172.9</td>\n",
              "      <td>76</td>\n",
              "      <td>118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>497</th>\n",
              "      <td>497</td>\n",
              "      <td>1</td>\n",
              "      <td>미추홀점</td>\n",
              "      <td>출장</td>\n",
              "      <td>18</td>\n",
              "      <td>2022-05-17</td>\n",
              "      <td>M</td>\n",
              "      <td>173.0</td>\n",
              "      <td>88</td>\n",
              "      <td>125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>498</th>\n",
              "      <td>498</td>\n",
              "      <td>1</td>\n",
              "      <td>미추홀점</td>\n",
              "      <td>출장</td>\n",
              "      <td>19</td>\n",
              "      <td>2022-05-17</td>\n",
              "      <td>F</td>\n",
              "      <td>165.5</td>\n",
              "      <td>92</td>\n",
              "      <td>137</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>499 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae73f92f-d3d2-4cef-b123-cc1010c0d631')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ae73f92f-d3d2-4cef-b123-cc1010c0d631 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ae73f92f-d3d2-4cef-b123-cc1010c0d631');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a4adce2f-337d-460d-9d78-a5b8d1898874\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a4adce2f-337d-460d-9d78-a5b8d1898874')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a4adce2f-337d-460d-9d78-a5b8d1898874 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 499,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 144,\n        \"min\": 0,\n        \"max\": 498,\n        \"num_unique_values\": 499,\n        \"samples\": [\n          460,\n          73,\n          231\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uce21\\uc815\\ud68c\\ucc28\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 16,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          9,\n          15,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc13c\\ud130\\uba85\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"\\uc5f0\\uc218\\uc9c0\\uc810\",\n          \"\\ubbf8\\ucd94\\ud640\\uc810\",\n          \"\\uc11c\\uc6b8\\uc9c0\\uc810\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uce21\\uc815\\uc7a5\\uc18c\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\uc77c\\ubc18\",\n          \"\\ucd9c\\uc7a5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc5f0\\ub839\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 11,\n        \"max\": 83,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          65,\n          73\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uce21\\uc815\\uc77c\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"2022-05-02\",\n          \"2022-05-03\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc131\\ubcc4\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"M\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ud0a4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.117358113842801,\n        \"min\": 131.0,\n        \"max\": 190.0,\n        \"num_unique_values\": 266,\n        \"samples\": [\n          160.8,\n          146.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc717\\ubab8\\uc77c\\uc73c\\ud0a4\\uae30\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          79,\n          100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uba40\\ub9ac\\ub6f0\\uae30\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 0,\n        \"max\": 158,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          124,\n          99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 참여자 수 (행 개수)\n",
        "num_sessions = len(df)\n",
        "print(f\"전체 참여자 수: {num_sessions}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O63OwBhL14rT",
        "outputId": "2ea91307-7bbf-4bdf-aa17-2f980902bf03"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "전체 참여자 수: 499\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 윗몸일으키기 항목의 최솟값, 최댓값, 평균 구하기\n",
        "sit_up_min = df['윗몸일으키기'].min()\n",
        "sit_up_max = df['윗몸일으키기'].max()\n",
        "sit_up_mean = df['윗몸일으키기'].mean()\n",
        "\n",
        "# 멀리뛰기 항목의 최솟값, 최댓값, 평균 구하기\n",
        "long_jump_min = df['멀리뛰기'].min()\n",
        "long_jump_max = df['멀리뛰기'].max()\n",
        "long_jump_mean = df['멀리뛰기'].mean()\n",
        "\n",
        "# 결과 출력\n",
        "print('윗몸일으키기:')\n",
        "print(f'  최솟값: {sit_up_min}')\n",
        "print(f'  최댓값: {sit_up_max}')\n",
        "print(f'  평균: {sit_up_mean}')\n",
        "\n",
        "print('\\n멀리뛰기:')\n",
        "print(f'  최솟값: {long_jump_min}')\n",
        "print(f'  최댓값: {long_jump_max}')\n",
        "print(f'  평균: {long_jump_mean}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MGdiHOM6yKv3",
        "outputId": "3c094200-f06e-412d-c8e4-e16ca380ca6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "윗몸일으키기:\n",
            "  최솟값: 0\n",
            "  최댓값: 100\n",
            "  평균: 75.8997995991984\n",
            "\n",
            "멀리뛰기:\n",
            "  최솟값: 0\n",
            "  최댓값: 158\n",
            "  평균: 122.91382765531063\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 윗몸일으키기와 멀리뛰기 데이터 (예시)\n",
        "sit_up = df['윗몸일으키기']\n",
        "long_jump = df['멀리뛰기']\n",
        "\n",
        "# 최솟값, 최댓값, 평균 계산\n",
        "sit_up_min = sit_up.min()\n",
        "sit_up_max = sit_up.max()\n",
        "sit_up_mean = sit_up.mean()\n",
        "\n",
        "long_jump_min = long_jump.min()\n",
        "long_jump_max = long_jump.max()\n",
        "long_jump_mean = long_jump.mean()\n",
        "\n",
        "# 선 그래프 그리기\n",
        "plt.plot(['최솟값', '최댓값', '평균'], [sit_up_min, sit_up_max, sit_up_mean], label='윗몸일으키기')\n",
        "plt.plot(['최솟값', '최댓값', '평균'], [long_jump_min, long_jump_max, long_jump_mean], label='멀리뛰기')\n",
        "\n",
        "# 그래프 설정\n",
        "plt.title('윗몸일으키기와 멀리뛰기 최솟값, 최댓값, 평균')\n",
        "plt.xlabel('항목')\n",
        "plt.ylabel('값')\n",
        "plt.legend()\n",
        "\n",
        "# 그래프 출력\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "yX5whac-7f3t",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "6a67baa6-1245-466b-b8ab-5861ab1a9906"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "image/png": {
              "width": 571,
              "height": 454
            }
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 성별에 따라 구분하여 윗몸일으키기 항목의 최솟값, 최댓값, 평균 구하기\n",
        "sit_up_stats = df.groupby('성별')['윗몸일으키기'].agg(['min', 'max', 'mean'])\n",
        "\n",
        "# 성별에 따라 구분하여 멀리뛰기 항목의 최솟값, 최댓값, 평균 구하기\n",
        "long_jump_stats = df.groupby('성별')['멀리뛰기'].agg(['min', 'max', 'mean'])\n",
        "\n",
        "# 결과 출력\n",
        "print('윗몸일으키기 (성별 구분):\\n', sit_up_stats)\n",
        "print('\\n멀리뛰기 (성별 구분):\\n', long_jump_stats)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R5BSVDeZzBGq",
        "outputId": "a3ab13da-7cf8-45ae-e5da-d68441688dda"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "윗몸일으키기 (성별 구분):\n",
            "     min  max       mean\n",
            "성별                     \n",
            "F    54   98  76.408377\n",
            "M     0  100  75.584416\n",
            "\n",
            "멀리뛰기 (성별 구분):\n",
            "     min  max        mean\n",
            "성별                      \n",
            "F    99  158  122.507853\n",
            "M     0  158  123.165584\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# CSV 파일 불러오기\n",
        "df = pd.read_csv('/content/drive/MyDrive/체력측정.csv', encoding='cp949')\n",
        "\n",
        "# 연령별로 구분하여 윗몸일으키기 항목의 최솟값, 최댓값, 평균 구하기\n",
        "sit_up_stats = df.groupby('연령')['윗몸일으키기'].agg(['min', 'max', 'mean'])\n",
        "\n",
        "# 연령별로 구분하여 멀리뛰기 항목의 최솟값, 최댓값, 평균 구하기\n",
        "long_jump_stats = df.groupby('연령')['멀리뛰기'].agg(['min', 'max', 'mean'])\n",
        "\n",
        "# 결과 출력\n",
        "print('윗몸일으키기 (연령별 구분):\\n', sit_up_stats)\n",
        "print('\\n멀리뛰기 (연령별 구분):\\n', long_jump_stats)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MatkTgy9zcly",
        "outputId": "73acd709-9a8f-4054-fdc9-b0ee704656f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "윗몸일으키기 (연령별 구분):\n",
            "     min  max       mean\n",
            "연령                     \n",
            "11    0   81  67.478261\n",
            "12    0   90  67.435897\n",
            "13   53   94  70.375000\n",
            "14   62   91  76.457143\n",
            "15   64   98  80.771930\n",
            "16   64   89  80.833333\n",
            "17   60   94  80.511628\n",
            "18   41   88  74.976744\n",
            "19   59  100  77.640625\n",
            "20   56   97  69.217391\n",
            "21   59   87  72.545455\n",
            "22   58   85  71.625000\n",
            "23   62   89  73.800000\n",
            "24   78   78  78.000000\n",
            "25   61   79  72.666667\n",
            "26   76   88  80.000000\n",
            "27   63   87  75.000000\n",
            "28   65   77  71.000000\n",
            "29   79   80  79.500000\n",
            "30   54   79  66.500000\n",
            "31   75   86  80.400000\n",
            "32   86   86  86.000000\n",
            "33   87   87  87.000000\n",
            "35   63   63  63.000000\n",
            "38   84   88  86.333333\n",
            "39   65   72  68.500000\n",
            "40   65   83  75.666667\n",
            "43   93   96  94.500000\n",
            "46   68   79  73.500000\n",
            "47   98   98  98.000000\n",
            "48   97   97  97.000000\n",
            "50   84   86  85.000000\n",
            "52   71   84  77.500000\n",
            "53   84   84  84.000000\n",
            "54   85   85  85.000000\n",
            "56   84   84  84.000000\n",
            "57   85   85  85.000000\n",
            "58   66   86  76.000000\n",
            "59   62   62  62.000000\n",
            "60   56   95  75.500000\n",
            "61   75   75  75.000000\n",
            "62   65   77  71.000000\n",
            "63   60   88  74.000000\n",
            "64   64   79  70.666667\n",
            "65   68   93  80.500000\n",
            "66   79   91  85.000000\n",
            "67   91   91  91.000000\n",
            "68   70   88  78.666667\n",
            "69   65   65  65.000000\n",
            "71   90   90  90.000000\n",
            "73   57   76  66.500000\n",
            "75   68   68  68.000000\n",
            "83   77   77  77.000000\n",
            "\n",
            "멀리뛰기 (연령별 구분):\n",
            "     min  max        mean\n",
            "연령                      \n",
            "11    0  137  112.608696\n",
            "12    0  139  100.153846\n",
            "13   90  144  115.458333\n",
            "14  110  138  121.657143\n",
            "15  111  143  122.842105\n",
            "16  111  145  123.404762\n",
            "17  111  148  125.930233\n",
            "18   92  150  122.069767\n",
            "19   87  156  129.921875\n",
            "20  106  147  123.826087\n",
            "21  108  133  121.909091\n",
            "22  105  155  130.000000\n",
            "23  105  145  128.400000\n",
            "24  119  119  119.000000\n",
            "25  106  135  125.000000\n",
            "26  121  145  136.600000\n",
            "27  122  122  122.000000\n",
            "28  110  136  123.000000\n",
            "29  124  126  125.000000\n",
            "30  118  122  120.000000\n",
            "31  111  145  131.400000\n",
            "32  126  126  126.000000\n",
            "33  136  136  136.000000\n",
            "35  138  138  138.000000\n",
            "38  123  149  136.333333\n",
            "39  106  126  116.000000\n",
            "40  103  142  128.666667\n",
            "43  142  154  148.000000\n",
            "46  120  132  126.000000\n",
            "47  145  145  145.000000\n",
            "48  143  143  143.000000\n",
            "50  126  146  136.000000\n",
            "52  107  137  122.000000\n",
            "53  140  140  140.000000\n",
            "54  142  142  142.000000\n",
            "56  158  158  158.000000\n",
            "57  135  135  135.000000\n",
            "58  115  153  134.000000\n",
            "59  105  105  105.000000\n",
            "60  117  144  130.500000\n",
            "61  113  113  113.000000\n",
            "62  122  156  139.000000\n",
            "63  103  131  117.000000\n",
            "64  107  143  124.333333\n",
            "65  121  151  136.000000\n",
            "66  150  156  153.000000\n",
            "67  156  156  156.000000\n",
            "68  129  158  146.000000\n",
            "69  110  110  110.000000\n",
            "71  136  136  136.000000\n",
            "73  100  151  125.500000\n",
            "75  122  122  122.000000\n",
            "83  143  143  143.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# '연령' 열이 없는 경우, '나이' 열을 '연령'으로 변경\n",
        "if '연령' not in df.columns:\n",
        "    df = df.rename(columns={'나이': '연령'})\n",
        "\n",
        "# '연령' 열의 데이터 타입을 숫자형으로 변환\n",
        "df['연령'] = pd.to_numeric(df['연령'], errors='coerce')\n",
        "\n",
        "# 연령별 윗몸일으키기 평균 계산\n",
        "sit_up_mean = df.groupby('연령')['윗몸일으키기'].mean()\n",
        "\n",
        "# 연령별 멀리뛰기 평균 계산\n",
        "long_jump_mean = df.groupby('연령')['멀리뛰기'].mean()\n",
        "\n",
        "# 윗몸일으키기 평균이 가장 높은 연령\n",
        "max_sit_up_age = sit_up_mean.idxmax()\n",
        "\n",
        "# 멀리뛰기 평균이 가장 높은 연령\n",
        "max_long_jump_age = long_jump_mean.idxmax()\n",
        "\n",
        "# 결과 출력\n",
        "print(f\"윗몸일으키기 평균이 가장 높은 연령: {max_sit_up_age}\")\n",
        "print(f\"멀리뛰기 평균이 가장 높은 연령: {max_long_jump_age}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PEADX6l51AJE",
        "outputId": "e87c91b2-b4b0-43ca-896b-11fd23d2cdaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "윗몸일으키기 평균이 가장 높은 연령: 47\n",
            "멀리뛰기 평균이 가장 높은 연령: 56\n"
          ]
        }
      ]
    }
  ]
}
